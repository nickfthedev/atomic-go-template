package profile

import (
	"fmt"
	"github.com/go-playground/form/v4"
	"github.com/go-playground/validator/v10"
	"github.com/google/uuid"
	"gorm.io/gorm"
	"io"
	"net/http"
	"os"
	"strings"
	"time"

	"my-go-template/internal/config"
	"my-go-template/internal/mail"
	"my-go-template/internal/middleware"
	"my-go-template/internal/model"
	"my-go-template/internal/user"
	"my-go-template/internal/utils"
	"my-go-template/web/components/common"
	"my-go-template/web/layout"
)

type Handler struct {
	formDecoder *form.Decoder
	validate    *validator.Validate
	db          *gorm.DB
	config      *config.Config
	mail        mail.Service
}

func New(db *gorm.DB, config *config.Config, validate *validator.Validate, formDecoder *form.Decoder, mail mail.Service) *Handler {
	return &Handler{
		db:          db,
		config:      config,
		validate:    validate,
		formDecoder: formDecoder,
		mail:        mail,
	}
}

func (h *Handler) GET(w http.ResponseWriter, r *http.Request) {
	templ.Handler(h.Profile(r, user.GetUserFromContext(r), h.config)).ServeHTTP(w, r)
}

func (h *Handler) POST(w http.ResponseWriter, r *http.Request) {
	// Parse Multipart Form
	if err := r.ParseMultipartForm(10 << 20); err != nil {
		templ.Handler(common.Alert(common.AlertData{
			AlertType: "error",
			Message:   "Error processing form data: " + err.Error(),
		})).ServeHTTP(w, r)
		return
	}

	var avatarPath string
	// Check if avatar is set
	if r.MultipartForm.File["avatar"] != nil && h.config.Auth.EnableAvatar {
		avatarFile := r.MultipartForm.File["avatar"][0]

		// Open File
		avatar, err := avatarFile.Open()
		if err != nil {
			fmt.Println("Error opening avatar file:", err)
			templ.Handler(common.Alert(common.AlertData{
				AlertType: "error",
				Message:   "Error opening avatar file: " + err.Error(),
			})).ServeHTTP(w, r)
			return
		}
		defer avatar.Close()

		// Read the first 512 bytes to detect content type
		buffer := make([]byte, 512)
		_, err = avatar.Read(buffer)
		if err != nil && err != io.EOF {
			fmt.Println("Error reading avatar file:", err)
			templ.Handler(common.Alert(common.AlertData{
				AlertType: "error",
				Message:   "Error reading avatar file: " + err.Error(),
			})).ServeHTTP(w, r)
			return
		}

		// Detect content type
		contentType := http.DetectContentType(buffer)

		// Check if the content type is an allowed image format
		if contentType != "image/jpeg" && contentType != "image/png" {
			templ.Handler(common.Alert(common.AlertData{
				AlertType: "error",
				Message:   "Invalid file format. Please upload a PNG or JPEG image.",
			})).ServeHTTP(w, r)
			return
		}

		// Reset the file pointer to the beginning
		avatar.Seek(0, 0)

		// Ensure the directory exists
		if err := os.MkdirAll("public/avatars", os.ModePerm); err != nil {
			fmt.Println("Error creating directory:", err)
			templ.Handler(common.Alert(common.AlertData{
				AlertType: "error",
				Message:   "Error creating directory: " + err.Error(),
			})).ServeHTTP(w, r)
			return
		}

		// Generate a random filename
		avatarPath = uuid.New().String() + "-" + time.Now().Format("060102150405") + "." + strings.Split(avatarFile.Filename, ".")[1]

		// Save Avatar to public folder
		file, err := os.Create("public/avatars/" + avatarPath)
		if err != nil {
			fmt.Println("Error creating file:", err)
			templ.Handler(common.Alert(common.AlertData{
				AlertType: "error",
				Message:   "Error creating file: " + err.Error(),
			})).ServeHTTP(w, r)
			return
		}
		defer file.Close()

		// Copy the file content
		if _, err := io.Copy(file, avatar); err != nil {
			fmt.Println("Error copying file content:", err)
			templ.Handler(common.Alert(common.AlertData{
				AlertType: "error",
				Message:   "Error copying file content: " + err.Error(),
			})).ServeHTTP(w, r)
			return
		}
	}

	// Declare the input struct
	var input model.EditProfileInput
	// Parse and bind the form data to the input struct
	if err := utils.ParseAndBindForm(r, &input, h.formDecoder); err != nil {
		templ.Handler(common.Alert(common.AlertData{
			AlertType: "error",
			Message:   "Error processing form data: " + err.Error(),
		})).ServeHTTP(w, r)
		return
	}
	// Handle empty password fields
	if input.Password != nil && *input.Password == "" {
		input.Password = nil
	}
	// Validate the input
	if err := h.validate.Struct(input); err != nil {
		validationErrors := err.(validator.ValidationErrors)
		var messages []string
		for _, validationError := range validationErrors {
			messages = append(messages, utils.MsgForTag(validationError))
		}
		// Handle validation errors
		templ.Handler(common.Alert(common.AlertData{
			AlertType: "error",
			Messages:  messages,
		})).ServeHTTP(w, r)
		return
	}

	// Get user from database
	user := r.Context().Value(middleware.UserKey).(model.User)
	user.Password = nil
	// Update User Name and Avatar Path, nil values will be skipped on saving
	updateFields := map[string]interface{}{
		"username": input.Username,
	}

	// Only update avatar_url if a new avatar is uploaded
	if avatarPath != "" {
		updateFields["avatar_url"] = avatarPath
	}

	// Check if email has changed and resend verification email, if enabled
	var verifyMailToken string
	if user.Email != input.Email {
		if h.config.Auth.EnableVerifyEmail {
			verifyMailToken = uuid.New().String()
			updateFields["verify_mail_token"] = &verifyMailToken
			updateFields["verify_mail_address"] = &input.Email
			updateFields["verified_at"] = nil
			// Verification Mail will be sent after the user is updated successfully
		} else {
			updateFields["email"] = input.Email
		}
	}

	// Check if input password is not nil
	if input.Password != nil && input.PasswordConfirm != nil {
		// Check if password and confirm password match
		if *input.Password != *input.PasswordConfirm {
			templ.Handler(common.Alert(common.AlertData{
				AlertType: "error",
				Message:   "Passwords do not match",
			})).ServeHTTP(w, r)
			return
		}
		hashedPassword, err := utils.HashPassword(*input.Password)
		if err != nil {
			templ.Handler(common.Alert(common.AlertData{
				AlertType: "error",
				Message:   "Error hashing password: " + err.Error(),
			})).ServeHTTP(w, r)
			return
		}
		user.Password = &hashedPassword
	}

	// Conditionally add the password field if it has been set
	if user.Password != nil {
		updateFields["password"] = *user.Password
	}
	// Save user to database
	err := h.db.Model(&user).Updates(updateFields).Error
	if err != nil {
		// Check for unique constraint violation
		if strings.Contains(err.Error(), "UNIQUE constraint failed") {
			templ.Handler(common.Alert(common.AlertData{
				Message:   "A user with this email or username already exists",
				AlertType: "error",
			})).ServeHTTP(w, r)
		} else {
			templ.Handler(common.Alert(common.AlertData{
				AlertType: "error",
				Message:   "Error updating user: " + err.Error(),
			})).ServeHTTP(w, r)
		}
		return
	}
	if user.Email != input.Email && h.config.Auth.EnableVerifyEmail {
		// Send verification email
		err := h.mail.Send(user.Email,
			h.config.App.Name+" - Verify your new email address",
			"Please click the link below to verify your new email address: "+h.config.App.Url+"/auth/verify-email?token="+verifyMailToken,
		)
		if err != nil {
			fmt.Println(err.Error())
			return
		}
	}
	// Return a success response
	templ.Handler(common.Alert(common.AlertData{
		AlertType: "success",
		Message:   "Profile updated successfully. ",
	})).ServeHTTP(w, r)
}

templ (h *Handler) Profile(r *http.Request, user model.User, config *config.Config) {
	@layout.Base(r) {
		@common.UseHTMX() {
			<div class="flex justify-center w-full">
				<div class="flex flex-col w-full p-12 gap-4">
					<div id="result-container" class=""></div>
					<h1 class="text-2xl font-bold tracking-tight text-center">Edit Profile</h1>
					<form
						hx-post="/user/profile"
						class="flex flex-col gap-2 w-full"
						method="POST"
						hx-target="#result-container"
						hx-swap="innerHTML"
						enctype="multipart/form-data"
					>
						<label class="input input-bordered flex items-center gap-2">
							<svg
								xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 16 16"
								fill="currentColor"
								class="h-4 w-4 opacity-70"
							>
								<path
									d="M2.5 3A1.5 1.5 0 0 0 1 4.5v.793c.026.009.051.02.076.032L7.674 8.51c.206.1.446.1.652 0l6.598-3.185A.755.755 0 0 1 15 5.293V4.5A1.5 1.5 0 0 0 13.5 3h-11Z"
								></path>
								<path
									d="M15 6.954 8.978 9.86a2.25 2.25 0 0 1-1.956 0L1 6.954V11.5A1.5 1.5 0 0 0 2.5 13h11a1.5 1.5 0 0 0 1.5-1.5V6.954Z"
								></path>
							</svg>
							<input type="text" class="grow" placeholder="Email" name="email" value={ user.Email }/>
						</label>
						<label class="input input-bordered flex items-center gap-2">
							<svg
								xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 16 16"
								fill="currentColor"
								class="h-4 w-4 opacity-70"
							>
								<path
									d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6ZM12.735 14c.618 0 1.093-.561.872-1.139a6.002 6.002 0 0 0-11.215 0c-.22.578.254 1.139.872 1.139h9.47Z"
								></path>
							</svg>
							<input type="text" class="grow" placeholder="Username" name="username" value={ user.Username }/>
						</label>
						<label class="input input-bordered flex items-center gap-2">
							<svg
								xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 16 16"
								fill="currentColor"
								class="h-4 w-4 opacity-70"
							>
								<path
									fill-rule="evenodd"
									d="M14 6a4 4 0 0 1-4.899 3.899l-1.955 1.955a.5.5 0 0 1-.353.146H5v1.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2.293a.5.5 0 0 1 .146-.353l3.955-3.955A4 4 0 1 1 14 6Zm-4-2a.75.75 0 0 0 0 1.5.5.5 0 0 1 .5.5.75.75 0 0 0 1.5 0 2 2 0 0 0-2-2Z"
									clip-rule="evenodd"
								></path>
							</svg>
							<input type="password" class="grow" placeholder="Password" name="password"/>
						</label>
						<label class="input input-bordered flex items-center gap-2">
							<svg
								xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 16 16"
								fill="currentColor"
								class="h-4 w-4 opacity-70"
							>
								<path
									fill-rule="evenodd"
									d="M14 6a4 4 0 0 1-4.899 3.899l-1.955 1.955a.5.5 0 0 1-.353.146H5v1.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2.293a.5.5 0 0 1 .146-.353l3.955-3.955A4 4 0 1 1 14 6Zm-4-2a.75.75 0 0 0 0 1.5.5.5 0 0 1 .5.5.75.75 0 0 0 1.5 0 2 2 0 0 0-2-2Z"
									clip-rule="evenodd"
								></path>
							</svg>
							<input type="password" class="grow" placeholder="Confirm Password" name="confirm_password"/>
						</label>
						if config.Auth.EnableAvatar {
							<label class="form-control w-full max-w-xs">
								<div class="label">
									<span class="label-text">Upload new Avatar</span>
								</div>
								<input name="avatar" type="file" class="file-input file-input-bordered w-full max-w-xs" accept=".png, .jpg, .jpeg"/>
								<div class="label">
									<span class="label-text-alt">Allowed: .png, .jpg, .jpeg</span>
								</div>
							</label>
						}
						<button type="submit" class="btn btn-active btn-accent btn-block">Update</button>
					</form>
				</div>
			</div>
		}
	}
}
