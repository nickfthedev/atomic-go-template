package reset_password

import (
	"github.com/go-playground/form/v4"
	"github.com/go-playground/validator/v10"
	"gorm.io/gorm"
	"my-go-template/internal/config"
	"my-go-template/internal/mail"
	"my-go-template/internal/model"
	"my-go-template/internal/utils"
	"my-go-template/web/components/common"
	"my-go-template/web/layout"
	"net/http"
	"time"
)

// This is a scaffold for a new route
// You can remove entries from the struct if you don't need them
// You can also remove the GET and POST methods if you don't need them
// You could also add new methods to the struct if you need them like PUT or DELETE

type Handler struct {
	formDecoder *form.Decoder
	validate    *validator.Validate
	db          *gorm.DB
	config      *config.Config
	mail        mail.Service
}

func New(db *gorm.DB, config *config.Config, validate *validator.Validate, formDecoder *form.Decoder, mail mail.Service) *Handler {
	return &Handler{
		db:          db,
		config:      config,
		validate:    validate,
		formDecoder: formDecoder,
		mail:        mail,
	}
}

// GET is the handler for the GET request, it renders the template
func (h *Handler) GET(w http.ResponseWriter, r *http.Request) {
	// Get the token from the URL
	token := r.URL.Query().Get("token")

	// Find the user with the token
	user := model.User{}
	err := h.db.First(&user, "password_reset_token = ?", token).Error
	if err != nil {
		templ.Handler(common.AlertWithLayout(r, common.AlertData{
			Message:   "Invalid password reset token. Maybe expired?",
			AlertType: "error",
			ActionButton: &common.ActionButton{
				Label: "Request Password Reset",
				Url:   "/auth/forget-password",
			},
		})).ServeHTTP(w, r)
		return
	}

	// Check if link is valid
	if user.PasswordResetRequestedAt == nil || user.PasswordResetRequestedAt.Add(24*time.Hour).Before(time.Now()) {
		templ.Handler(common.AlertWithLayout(r, common.AlertData{
			Message:   "Invalid password reset token. Maybe expired?",
			AlertType: "error",
			ActionButton: &common.ActionButton{
				Label: "Request Password Reset",
				Url:   "/auth/forget-password",
			},
		})).ServeHTTP(w, r)
		return
	}

	templ.Handler(h.ResetPassword(r)).ServeHTTP(w, r)
}

// POST is the handler for the POST request, it renders feedback to the user like errors or success messages
func (h *Handler) POST(w http.ResponseWriter, r *http.Request) {

	var input model.ResetPasswordInput
	if err := utils.ParseAndBindForm(r, &input, h.formDecoder); err != nil {
		templ.Handler(common.Alert(common.AlertData{
			Message:   "Error processing form data: " + err.Error(),
			AlertType: "error",
		})).ServeHTTP(w, r)
		return
	}

	// Validate the input
	if err := h.validate.Struct(input); err != nil {
		validationErrors := err.(validator.ValidationErrors)
		var messages []string
		for _, validationError := range validationErrors {
			messages = append(messages, utils.MsgForTag(validationError))
		}
		// Handle validation errors
		templ.Handler(common.Alert(common.AlertData{
			Messages:  messages,
			AlertType: "error",
		})).ServeHTTP(w, r)
		return
	}

	if input.Password != input.PasswordConfirm {
		templ.Handler(common.Alert(common.AlertData{
			Messages:  []string{"Passwords do not match"},
			AlertType: "error",
		})).ServeHTTP(w, r)
		return
	}

	// Find the user with the token
	user := model.User{}
	err := h.db.First(&user, "password_reset_token = ?", input.Token).Error
	if err != nil {
		templ.Handler(common.AlertWithLayout(r, common.AlertData{
			Message:   "Invalid password reset token. Maybe expired?",
			AlertType: "error",
			ActionButton: &common.ActionButton{
				Label: "Request Password Reset",
				Url:   "/auth/forget-password",
			},
		})).ServeHTTP(w, r)
		return
	}

	// Check if link is valid
	if user.PasswordResetRequestedAt == nil || user.PasswordResetRequestedAt.Add(24*time.Hour).Before(time.Now()) {
		templ.Handler(common.AlertWithLayout(r, common.AlertData{
			Message:   "Invalid password reset token. Maybe expired?",
			AlertType: "error",
			ActionButton: &common.ActionButton{
				Label: "Request Password Reset",
				Url:   "/auth/forget-password",
			},
		})).ServeHTTP(w, r)
		return
	}

	// Hash the password
	hashedPassword, err := utils.HashPassword(input.Password)
	if err != nil {
		templ.Handler(common.Alert(common.AlertData{
			Message:   "Error hashing password: " + err.Error(),
			AlertType: "error",
		})).ServeHTTP(w, r)
		return
	}

	// Update the user
	user.Password = &hashedPassword
	user.PasswordResetRequestedAt = nil
	user.PasswordResetToken = nil
	h.db.Save(&user)

	// We retarget the htmx result and swap the innerHTML instead of outer
	// This way the login form gets swapped against the success message with the redirect
	w.Header().Add("HX-Retarget", "this")
	w.Header().Add("HX-Reswap", "innerHTML")
	// We trigger a JS in the component to clear the results div
	w.Header().Add("HX-Trigger", "clearResultDiv")
	templ.Handler(common.Alert(common.AlertData{
		Message:      "Password reset successful. You will be redirected to the login page in 2 seconds.",
		AlertType:    "success",
		RedirectUrl:  "/auth/login",
		RedirectTime: 2,
	})).ServeHTTP(w, r)
}

templ (h *Handler) ResetPassword(r *http.Request) {
	@layout.Base(r) {
		<div class="flex justify-center w-full">
			<div class="flex flex-col w-full p-12 gap-4">
				<div id="result"></div>
				<h1 class="text-2xl font-boldtracking-tight text-center">Reset your Password</h1>
				<form hx-post="/auth/reset-password" class="flex flex-col gap-2 w-full" method="POST" hx-swap="innerHTML" hx-target="#result">
					<input type="hidden" name="token" value={ r.URL.Query().Get("token") }/>
					<label class="input input-bordered flex items-center gap-2">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 16 16"
							fill="currentColor"
							class="h-4 w-4 opacity-70"
						>
							<path
								fill-rule="evenodd"
								d="M14 6a4 4 0 0 1-4.899 3.899l-1.955 1.955a.5.5 0 0 1-.353.146H5v1.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2.293a.5.5 0 0 1 .146-.353l3.955-3.955A4 4 0 1 1 14 6Zm-4-2a.75.75 0 0 0 0 1.5.5.5 0 0 1 .5.5.75.75 0 0 0 1.5 0 2 2 0 0 0-2-2Z"
								clip-rule="evenodd"
							></path>
						</svg>
						<input type="password" class="grow" placeholder="Password" name="password"/>
					</label>
					<label class="input input-bordered flex items-center gap-2">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 16 16"
							fill="currentColor"
							class="h-4 w-4 opacity-70"
						>
							<path
								fill-rule="evenodd"
								d="M14 6a4 4 0 0 1-4.899 3.899l-1.955 1.955a.5.5 0 0 1-.353.146H5v1.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2.293a.5.5 0 0 1 .146-.353l3.955-3.955A4 4 0 1 1 14 6Zm-4-2a.75.75 0 0 0 0 1.5.5.5 0 0 1 .5.5.75.75 0 0 0 1.5 0 2 2 0 0 0-2-2Z"
								clip-rule="evenodd"
							></path>
						</svg>
						<input type="password" class="grow" placeholder="Confirm Password" name="confirm_password"/>
					</label>
					<button type="submit" class="btn btn-active btn-accent btn-block">Reset Password</button>
				</form>
			</div>
		</div>
		<!-- We use this to remove content from result divs -->
		<script>
			document.body.addEventListener('clearResultDiv', function() {
				document.getElementById('result').innerHTML = '';
				});
			</script>
	}
}
