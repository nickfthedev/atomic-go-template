package forget_password

import (
	"fmt"
	"github.com/go-playground/form/v4"
	"github.com/go-playground/validator/v10"
	"github.com/google/uuid"
	"gorm.io/gorm"
	"my-go-template/internal/config"
	"my-go-template/internal/mail"
	"my-go-template/internal/model"
	"my-go-template/internal/user"
	"my-go-template/internal/utils"
	"my-go-template/web/components/common"
	"my-go-template/web/layout"
	"net/http"
	"time"
)

// This is a scaffold for a new route
// You can remove entries from the struct if you don't need them
// You can also remove the GET and POST methods if you don't need them
// You could also add new methods to the struct if you need them like PUT or DELETE

type Handler struct {
	formDecoder *form.Decoder
	validate    *validator.Validate
	db          *gorm.DB
	config      *config.Config
	mail        mail.Service
}

func New(db *gorm.DB, config *config.Config, validate *validator.Validate, formDecoder *form.Decoder, mail mail.Service) *Handler {
	return &Handler{
		db:          db,
		config:      config,
		validate:    validate,
		formDecoder: formDecoder,
		mail:        mail,
	}
}

// GET is the handler for the GET request, it renders the template
func (h *Handler) GET(w http.ResponseWriter, r *http.Request) {
	templ.Handler(h.ForgetPassword(r)).ServeHTTP(w, r)
}

// POST is the handler for the POST request, it renders feedback to the user like errors or success messages
func (h *Handler) POST(w http.ResponseWriter, r *http.Request) {
	var input model.ForgotPasswordInput
	if err := utils.ParseAndBindForm(r, &input, h.formDecoder); err != nil {
		templ.Handler(common.Alert(common.AlertData{
			Message:   "Error processing form data: " + err.Error(),
			AlertType: "error",
		})).ServeHTTP(w, r)
		return
	}

	// Validate the input
	if err := h.validate.Struct(input); err != nil {
		validationErrors := err.(validator.ValidationErrors)
		var messages []string
		for _, validationError := range validationErrors {
			messages = append(messages, utils.MsgForTag(validationError))
		}
		// Handle validation errors
		templ.Handler(common.Alert(common.AlertData{
			Messages:  messages,
			AlertType: "error",
		})).ServeHTTP(w, r)
		return
	}

	// Check if the user exists, we dont want to handle the err because the user should not know if the email is valid or not
	user := model.User{}
	h.db.First(&user, "email = ?", input.Email)

	if user.ID != uuid.Nil {
		// Generate a random password reset token
		token := uuid.New().String()
		// Update the user with the password reset token
		user.PasswordResetToken = &token
		now := time.Now()
		user.PasswordResetRequestedAt = &now
		h.db.Save(&user)

		// Send verification email
		err := h.mail.Send(user.Email,
			h.config.App.Name+" - Reset your password",
			"Please click the link below to reset your password: "+h.config.App.Url+"/auth/reset-password?token="+*user.PasswordResetToken,
		)
		if err != nil {
			fmt.Println(err.Error())
			return
		}
	} // END IF USER EXISTS

	// We retarget the htmx result and swap the innerHTML instead of outer
	// This way the login form gets swapped against the success message with the redirect
	w.Header().Add("HX-Retarget", "this")
	w.Header().Add("HX-Reswap", "innerHTML")
	// We trigger a JS in the component to clear the results div
	w.Header().Add("HX-Trigger", "clearResultDiv")
	templ.Handler(common.Alert(common.AlertData{
		Message:   "A password reset email has been sent to your email address. Please check your email to reset your password. The link is valid for 24 hours",
		AlertType: "success",
	})).ServeHTTP(w, r)
}

templ (h *Handler) ForgetPassword(r *http.Request) {
	if user.GetUserFromContext(r).ID != uuid.Nil {
		<meta http-equiv="refresh" content="0; url=/"/>
	}
	@layout.Base(r) {
		<div class="flex justify-center w-full">
			<div class="flex flex-col w-full p-12 gap-4">
				<div id="result"></div>
				<h1 class="text-2xl font-boldtracking-tight text-center">Forgot your Password?</h1>
				<form hx-post="/auth/forget-password" class="flex flex-col gap-2 w-full" method="POST" hx-swap="innerHTML" hx-target="#result">
					<label class="input input-bordered flex items-center gap-2">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 16 16"
							fill="currentColor"
							class="h-4 w-4 opacity-70"
						>
							<path
								d="M2.5 3A1.5 1.5 0 0 0 1 4.5v.793c.026.009.051.02.076.032L7.674 8.51c.206.1.446.1.652 0l6.598-3.185A.755.755 0 0 1 15 5.293V4.5A1.5 1.5 0 0 0 13.5 3h-11Z"
							></path>
							<path
								d="M15 6.954 8.978 9.86a2.25 2.25 0 0 1-1.956 0L1 6.954V11.5A1.5 1.5 0 0 0 2.5 13h11a1.5 1.5 0 0 0 1.5-1.5V6.954Z"
							></path>
						</svg>
						<input type="text" class="grow" placeholder="Email" name="email"/>
					</label>
					<a href="/auth/login" class="link link-hover link-accent">Back to Login</a>
					<button type="submit" class="btn btn-active btn-accent btn-block">Reset Password</button>
				</form>
			</div>
		</div>
		<script>
			document.body.addEventListener('clearResultDiv', function() {
				document.getElementById('result').innerHTML = '';
				});
			</script>
	}
}
