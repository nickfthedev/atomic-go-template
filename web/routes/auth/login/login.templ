package login

import (
	"github.com/go-playground/form/v4"
	"github.com/go-playground/validator/v10"
	"github.com/google/uuid"
	"gorm.io/gorm"
	"net/http"

	"my-go-template/internal/config"
	"my-go-template/internal/model"
	"my-go-template/internal/user"
	"my-go-template/internal/utils"
	"my-go-template/web/components/common"
	"my-go-template/web/layout"
)

type Handler struct {
	formDecoder *form.Decoder
	validate    *validator.Validate
	db          *gorm.DB
	config      *config.Config
}

func New(db *gorm.DB, config *config.Config, validate *validator.Validate, formDecoder *form.Decoder) *Handler {
	return &Handler{
		db:          db,
		config:      config,
		validate:    validate,
		formDecoder: formDecoder,
	}
}

func (h *Handler) GET(w http.ResponseWriter, r *http.Request) {
	templ.Handler(Login(r)).ServeHTTP(w, r)
}

func (h *Handler) POST(w http.ResponseWriter, r *http.Request) {
	// Declare the input struct
	var input model.LoginInput

	// Parse and bind the form data to the input struc
	if err := utils.ParseAndBindForm(r, &input, h.formDecoder); err != nil {
		templ.Handler(common.Alert(common.AlertData{
			AlertType: "error",
			Message:   "Error processing form data: " + err.Error(),
		})).ServeHTTP(w, r)
		return
	}

	// Validate the input
	if err := h.validate.Struct(input); err != nil {
		validationErrors := err.(validator.ValidationErrors)
		var messages []string
		for _, validationError := range validationErrors {
			messages = append(messages, utils.MsgForTag(validationError))
		}
		// Handle validation errors
		templ.Handler(common.Alert(common.AlertData{
			AlertType: "error",
			Messages:  messages,
		})).ServeHTTP(w, r)
		return
	}

	// Find user in database
	user := model.User{}
	if err := h.db.First(&user, "email = ?", input.Email).Error; err != nil {
		templ.Handler(common.Alert(common.AlertData{
			AlertType: "error",
			Message:   "Invalid email or password",
		})).ServeHTTP(w, r)
		return
	}

	if err := utils.CheckPasswordHash(*user.Password, input.Password); err != nil {
		templ.Handler(common.Alert(common.AlertData{
			AlertType: "error",
			Message:   "Invalid email or password",
		})).ServeHTTP(w, r)
		return
	}

	if user.VerifiedAt == nil && h.config.Auth.EnableVerifyEmail {
		templ.Handler(common.Alert(common.AlertData{
			AlertType: "error",
			Message:   "Please verify your email address before logging in",
		})).ServeHTTP(w, r)
		return
	}

	// Set Cookie
	if err := utils.CreateJWTCookie(w, user.ID.String()); err != nil {
		templ.Handler(common.Alert(common.AlertData{
			AlertType: "error",
			Message:   "Error creating JWT cookie: " + err.Error(),
		})).ServeHTTP(w, r)
		return
	}

	// We retarget the htmx result and swap the innerHTML instead of outer
	// This way the login form gets swapped against the success message with the redirect
	w.Header().Add("HX-Retarget", "this")
	w.Header().Add("HX-Reswap", "innerHTML")
	// We trigger a JS in the component to clear the results div
	w.Header().Add("HX-Trigger", "clearResultDiv")

	templ.Handler(common.Alert(common.AlertData{
		AlertType:    "success",
		Message:      "Login successful",
		RedirectUrl:  "/",
		RedirectTime: 2,
	})).ServeHTTP(w, r)
}

templ Login(r *http.Request) {
	@layout.Base(r) {
		if user.GetUserFromContext(r).ID != uuid.Nil {
			<meta http-equiv="refresh" content="0; url=/"/>
		}
		<div class="flex justify-center w-full">
			<div class="flex flex-col w-full p-12 gap-4">
				<div id="result"></div>
				<h1 class="text-2xl font-bold tracking-tight text-center">Login</h1>
				<form
					class="flex flex-col gap-2 w-full"
					method="POST"
					hx-post="/auth/login"
					hx-swap="innerHTML"
					hx-target="#result"
				>
					<label class="input input-bordered flex items-center gap-2">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 16 16"
							fill="currentColor"
							class="h-4 w-4 opacity-70"
						>
							<path
								d="M2.5 3A1.5 1.5 0 0 0 1 4.5v.793c.026.009.051.02.076.032L7.674 8.51c.206.1.446.1.652 0l6.598-3.185A.755.755 0 0 1 15 5.293V4.5A1.5 1.5 0 0 0 13.5 3h-11Z"
							></path>
							<path
								d="M15 6.954 8.978 9.86a2.25 2.25 0 0 1-1.956 0L1 6.954V11.5A1.5 1.5 0 0 0 2.5 13h11a1.5 1.5 0 0 0 1.5-1.5V6.954Z"
							></path>
						</svg>
						<input type="text" class="grow" placeholder="Email" name="email"/>
					</label>
					<label class="input input-bordered flex items-center gap-2">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 16 16"
							fill="currentColor"
							class="h-4 w-4 opacity-70"
						>
							<path
								fill-rule="evenodd"
								d="M14 6a4 4 0 0 1-4.899 3.899l-1.955 1.955a.5.5 0 0 1-.353.146H5v1.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2.293a.5.5 0 0 1 .146-.353l3.955-3.955A4 4 0 1 1 14 6Zm-4-2a.75.75 0 0 0 0 1.5.5.5 0 0 1 .5.5.75.75 0 0 0 1.5 0 2 2 0 0 0-2-2Z"
								clip-rule="evenodd"
							></path>
						</svg>
						<input type="password" class="grow" placeholder="Password" name="password"/>
					</label>
					<div class="flex flex-row justify-between">
						<a href="/auth/forget-password" class="link link-hover link-accent">Forgot your password?</a>
						<a href="/auth/signup" class="link link-hover link-accent">Don't have an account? Sign up here</a>
					</div>
					<button type="submit" class="btn btn-active btn-accent btn-block">Login</button>
				</form>
			</div>
		</div>
		<!-- We use this to remove content from result divs -->
		<script>
			document.body.addEventListener('clearResultDiv', function() {
				document.getElementById('result').innerHTML = '';
				});
			</script>
	}
}
